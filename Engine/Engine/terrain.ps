////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D grassTexture : register(t0);
Texture2D slopeTexture : register(t1);
Texture2D rockTexture  : register(t2);

SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
	float padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 normal : NORMAL;
	float height : HEIGHT;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float4 grassColor;
    float4 slopeColor;
    float4 rockColor;
    float slope;
	float height;
    float blendAmount;
	float4 slopetexColor;
	float4 heighttexColor;
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;


	// Sample the grass color from the texture using the sampler at this texture coordinate location.
    grassColor = grassTexture.Sample(SampleType, input.tex);

    // Sample the rock color from the texture using the sampler at this texture coordinate location.
    rockColor = rockTexture.Sample(SampleType, input.tex);

	slope = acos(dot(input.normal, float4(0.0f, 1.0f, 0.0f, 1.0f)));  //1.0f - input.normal.y;

	slopeColor = (slope * rockColor) + ((1.0 - slope) * grassColor);

	height = input.height / 20.0f;

	heighttexColor = (height * rockColor) + ((1.0 - height) * grassColor);

	textureColor = (heighttexColor + slopeColor)/2.0f;

	// Set the default output color to the ambient light value for all pixels.
    color = ambientColor;

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);
    }

    // Saturate the final light color.
    color = saturate(color);

	// Multiply the texture pixel and the final light color to get the result.
    color = color * textureColor;

    return color;
}